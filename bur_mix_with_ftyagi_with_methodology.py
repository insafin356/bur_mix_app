
import streamlit as st
import math
import pandas as pd
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –±–µ–Ω—Ç–æ–Ω–∏—Ç–∞ –∏ –ø–æ–ª–∏–º–µ—Ä–∞ –ø–æ –°–ü 341.1325800.2017", page_icon="üßÆ")
st.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–∞ –±–µ–Ω—Ç–æ–Ω–∏—Ç–∞ –∏ –ø–æ–ª–∏–º–µ—Ä–∞ –ø–æ –°–ü 341.1325800.2017")

# –¢–∞–±–ª–∏—Ü–∞ 8.3: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏–∞–º–µ—Ç—Ä–∞ —Ç—Ä—É–±—ã –∏ –±—É—Ä–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
def get_bur_diameter_from_table(pipe_diameter_mm):
    bur_diameter_table = [
        (0, 160, 240),
        (161, 225, 300),
        (226, 315, 400),
        (316, 400, 500),
        (401, 500, 600),
        (501, 630, 700),
        (631, 710, 800),
        (711, 800, 900),
        (801, 900, 1000),
        (901, 1000, 1100),
        (1001, 1200, 1300),
        (1201, 1400, 1500),
        (1401, 1600, 1700),
        (1601, 1800, 1900),
        (1801, 2000, 2100)
    ]
    for d_min, d_max, bur_d in bur_diameter_table:
        if d_min <= pipe_diameter_mm <= d_max:
            return bur_d / 1000
    return pipe_diameter_mm * 1.3 / 1000

# –¢–∏–ø–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∑–∞–ø–∞—Å–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –±—É—Ä–∏–º–æ—Å—Ç–∏
group_reserve_coefficients = {
    "I": 1.5,
    "II": 1.5,
    "III": 1.5,
    "IV": 2.0,
    "V": 2.0,
    "VI": 2.5,
    "VII": 2.5,
    "VIII": 2.5
}

# –¢–∏–ø—ã –≥—Ä—É–Ω—Ç–æ–≤ –∏ –Ω–æ—Ä–º—ã
soil_data = {
    "–°—É–ø–µ—Å—å": ("I", 1.0, 40, 0.3),
    "–ü–µ—Å–æ–∫": ("II", 1.0, 45, 0.4),
    "–°—É–≥–ª–∏–Ω–æ–∫": ("III", 1.2, 50, 0.5),
    "–ì–ª–∏–Ω–∞": ("IV", 1.2, 70, 0.6),
    "–ü–µ—Å–æ–∫ —Å—Ä–µ–¥–Ω–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏": ("V", 1.3, 80, 0.8),
    "–ì–ª–∏–Ω–∞ —Ç—É–≥–æ–ø–ª–∞—Å—Ç–∏—á–Ω–∞—è": ("VI", 1.4, 90, 1.0),
    "–ú–µ—Ä–≥–µ–ª—å": ("VII", 1.5, 100, 1.2),
    "–°–∫–∞–ª–∞": ("VIII", 1.5, 110, 1.5)
}

# –¢–∞–±–ª–∏—Ü–∞ –ê.3 (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è, –ø—Ä–∏–º–µ—Ä–Ω–∞—è)
table_a3_values = {
    240: {60: 70, 100: 90, 120: 100, 150: 110},
    300: {60: 90, 100: 110, 120: 120, 150: 140},
    400: {60: 120, 100: 140, 120: 160, 150: 180},
    500: {60: 140, 100: 160, 120: 180, 150: 200},
    600: {60: 160, 100: 180, 120: 200, 150: 220},
    700: {60: 180, 100: 200, 120: 230, 150: 250},
    800: {60: 200, 100: 230, 120: 260, 150: 280},
    900: {60: 220, 100: 260, 120: 290, 150: 310},
    1000: {60: 240, 100: 280, 120: 310, 150: 340}
}

def get_ftab(d_bur_mm, length_m):
    diam_key = min(table_a3_values.keys(), key=lambda k: abs(k - d_bur_mm))
    length_key = min(table_a3_values[diam_key].keys(), key=lambda k: abs(k - length_m))
    return table_a3_values[diam_key][length_key]

# –ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–∫–æ–≤
num_sections = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤", min_value=1, max_value=20, value=1, step=1)

section_results = []

for i in range(num_sections):
    st.subheader(f"–£—á–∞—Å—Ç–æ–∫ {i+1}")
    diameter = st.number_input(f"–î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã (–º–º) ‚Äî –£—á–∞—Å—Ç–æ–∫ {i+1}", min_value=50, max_value=2000, value=200, step=10, key=f"diameter_{i}")
    length = st.number_input(f"–ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å (–º) ‚Äî –£—á–∞—Å—Ç–æ–∫ {i+1}", min_value=1, max_value=10000, value=100, step=1, key=f"length_{i}")
    soil_type = st.selectbox(f"–¢–∏–ø –≥—Ä—É–Ω—Ç–∞ ‚Äî –£—á–∞—Å—Ç–æ–∫ {i+1}", list(soil_data.keys()), key=f"soil_{i}")

    group, f, bentonite_norm, polymer_norm = soil_data[soil_type]
    delta_L = length * 0.1
    D_bur = get_bur_diameter_from_table(diameter)
    volume = math.pi * (D_bur ** 2) / 4 * (length + delta_L) * f
    bentonite_total = volume * bentonite_norm
    polymer_total = volume * polymer_norm
    bentonite_per_m = bentonite_total / length
    polymer_per_m = polymer_total / length

    D_bur_mm = int(D_bur * 1000)
    F_tab = get_ftab(D_bur_mm, length)
    reserve_k = group_reserve_coefficients[group]
    F_total = F_tab * reserve_k

    section_results.append({
        "–£—á–∞—Å—Ç–æ–∫": f"{i+1}",
        "–î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã (–º–º)": diameter,
        "–î–ª–∏–Ω–∞ (–º)": length,
        "–¢–∏–ø –≥—Ä—É–Ω—Ç–∞": soil_type,
        "–ì—Ä—É–ø–ø–∞": group,
        "–ö–æ—ç—Ñ. F": f,
        "D –±—É—Ä. (–º–º)": D_bur_mm,
        "–û–±—ä–µ–º (–º¬≥)": round(volume, 2),
        "–ë–µ–Ω—Ç–æ–Ω–∏—Ç (–≤—Å–µ–≥–æ, –∫–≥)": round(bentonite_total, 1),
        "–ë–µ–Ω—Ç–æ–Ω–∏—Ç (–∫–≥/–º)": round(bentonite_per_m, 2),
        "–ü–æ–ª–∏–º–µ—Ä (–≤—Å–µ–≥–æ, –∫–≥)": round(polymer_total, 1),
        "–ü–æ–ª–∏–º–µ—Ä (–∫–≥/–º)": round(polymer_per_m, 2),
        "F —Ç–∞–±–ª. (–∫–ù)": F_tab,
        "–ö–æ—ç—Ñ. –∑–∞–ø–∞—Å–∞": reserve_k,
        "F –∏—Ç–æ–≥. (–∫–ù)": round(F_total, 1)
    })


def append_methodology_sheet(writer):
    methodology_rows = [
        ["–ú–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ –±—É—Ä–æ–≤–æ–≥–æ —Ä–∞—Å—Ç–≤–æ—Ä–∞ –∏ —Å–∏–ª—ã —Ç—è–≥–∏ (–ø–æ –°–ü 341.1325800.2017)"],
        [""],
        ["1. –í–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"],
        ["   - –î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞ (d–Ω), –º–º"],
        ["   - –î–ª–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞, –º"],
        ["   - –¢–∏–ø –≥—Ä—É–Ω—Ç–∞ (–ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ)"],
        [""],
        ["2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≥—Ä—É–Ω—Ç–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è."],
        ["3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–∞ –±—É—Ä–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (D–±—É—Ä): –ø–æ —Ç–∞–±–ª–∏—Ü–µ 8.3 –°–ü."],
        ["4. –†–∞—Å—á—ë—Ç –æ–±—ä—ë–º–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞ —Ä–∞—Å—Ç–≤–æ—Ä–∞ –ø–æ –≥—Ä—É–Ω—Ç—É –∏ –¥–∏–∞–º–µ—Ç—Ä—É –∫–∞–Ω–∞–ª–∞."],
        ["5. –†–∞—Å—á—ë—Ç F —Ç–∞–±–ª–∏—á–Ω–∞—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º –ê.2 –∏ –ê.3, –∏ —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞."],
        [""],
        ["F_–∏—Ç–æ–≥–æ = F—Ç–∞–± √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞"],
    ]
    workbook = writer.book
    worksheet = workbook.add_worksheet("–ú–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞")
    for row_idx, row in enumerate(methodology_rows):
        worksheet.write_row(row_idx, 0, row)

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ —É—á–∞—Å—Ç–∫–∏"):
    st.subheader("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—á—ë—Ç–∞")
    df = pd.DataFrame(section_results)
    st.dataframe(df)

    output_xlsx = BytesIO()
    with pd.ExcelWriter(output_xlsx, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–†–∞—Å—á–µ—Ç')
        append_methodology_sheet(writer)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å Excel", data=output_xlsx.getvalue(), file_name="bur_mix_with_ftyagi.xlsx")
